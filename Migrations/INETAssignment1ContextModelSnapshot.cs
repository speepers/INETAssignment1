// <auto-generated />
using System;
using INETAssignment1.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace INETAssignment1.Migrations
{
    [DbContext(typeof(INETAssignment1Context))]
    partial class INETAssignment1ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConcertGenre", b =>
                {
                    b.Property<int>("concertGenresgenreID")
                        .HasColumnType("int");

                    b.Property<int>("concertsconcertID")
                        .HasColumnType("int");

                    b.HasKey("concertGenresgenreID", "concertsconcertID");

                    b.HasIndex("concertsconcertID");

                    b.ToTable("ConcertGenre");
                });

            modelBuilder.Entity("INETAssignment1.Models.Band", b =>
                {
                    b.Property<int>("bandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bandID"));

                    b.Property<string>("bandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("concertID")
                        .HasColumnType("int");

                    b.Property<int>("genreID")
                        .HasColumnType("int");

                    b.HasKey("bandID");

                    b.HasIndex("concertID");

                    b.HasIndex("genreID");

                    b.ToTable("Band");
                });

            modelBuilder.Entity("INETAssignment1.Models.Concert", b =>
                {
                    b.Property<int>("concertID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("concertID"));

                    b.Property<int?>("concertLocationlocationID")
                        .HasColumnType("int");

                    b.Property<string>("concertName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("concertTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("headliningBandbandID")
                        .HasColumnType("int");

                    b.Property<string>("tourName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("concertID");

                    b.HasIndex("concertLocationlocationID");

                    b.HasIndex("headliningBandbandID");

                    b.ToTable("Concert");
                });

            modelBuilder.Entity("INETAssignment1.Models.Genre", b =>
                {
                    b.Property<int>("genreID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("genreID"));

                    b.Property<string>("genreDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("genreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("genreID");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("INETAssignment1.Models.Location", b =>
                {
                    b.Property<int>("locationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("locationID"));

                    b.Property<string>("locationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("locationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("ConcertGenre", b =>
                {
                    b.HasOne("INETAssignment1.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("concertGenresgenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("INETAssignment1.Models.Concert", null)
                        .WithMany()
                        .HasForeignKey("concertsconcertID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("INETAssignment1.Models.Band", b =>
                {
                    b.HasOne("INETAssignment1.Models.Concert", null)
                        .WithMany("supportingBands")
                        .HasForeignKey("concertID");

                    b.HasOne("INETAssignment1.Models.Genre", "genre")
                        .WithMany("bands")
                        .HasForeignKey("genreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genre");
                });

            modelBuilder.Entity("INETAssignment1.Models.Concert", b =>
                {
                    b.HasOne("INETAssignment1.Models.Location", "concertLocation")
                        .WithMany("concerts")
                        .HasForeignKey("concertLocationlocationID");

                    b.HasOne("INETAssignment1.Models.Band", "headliningBand")
                        .WithMany()
                        .HasForeignKey("headliningBandbandID");

                    b.Navigation("concertLocation");

                    b.Navigation("headliningBand");
                });

            modelBuilder.Entity("INETAssignment1.Models.Concert", b =>
                {
                    b.Navigation("supportingBands");
                });

            modelBuilder.Entity("INETAssignment1.Models.Genre", b =>
                {
                    b.Navigation("bands");
                });

            modelBuilder.Entity("INETAssignment1.Models.Location", b =>
                {
                    b.Navigation("concerts");
                });
#pragma warning restore 612, 618
        }
    }
}
